import { useState, useEffect } from 'react';
import * as SecureStore from 'expo-secure-store';

interface ConnectionDetails {
  wsURL: string | null;
  token: string | null;
  connectionError: string | null;
}

// LiveKit connection configuration
const LIVEKIT_CONFIG = {
  // Replace with your LiveKit server URL
  wsURL: process.env.EXPO_PUBLIC_LIVEKIT_URL || 'wss://your-livekit-server.com',
  
  // For development, you can use a sandbox token server
  // In production, generate tokens from your backend
  sandboxID: process.env.EXPO_PUBLIC_SANDBOX_ID || '',
  
  // If using manual token generation
  apiKey: process.env.EXPO_PUBLIC_LIVEKIT_API_KEY || '',
  secretKey: process.env.EXPO_PUBLIC_LIVEKIT_SECRET_KEY || '',
};

export function useConnectionDetails(): ConnectionDetails {
  const [wsURL, setWsURL] = useState<string | null>(null);
  const [token, setToken] = useState<string | null>(null);
  const [connectionError, setConnectionError] = useState<string | null>(null);

  useEffect(() => {
    initializeConnection();
  }, []);

  const initializeConnection = async () => {
    try {
      // Check if we have stored credentials
      const storedURL = await SecureStore.getItemAsync('livekit-url');
      const storedToken = await SecureStore.getItemAsync('livekit-token');
      
      if (storedURL && storedToken) {
        setWsURL(storedURL);
        setToken(storedToken);
        return;
      }

      // Use configuration from environment
      if (LIVEKIT_CONFIG.wsURL && LIVEKIT_CONFIG.wsURL !== 'wss://your-livekit-server.com') {
        setWsURL(LIVEKIT_CONFIG.wsURL);
        
        // For sandbox mode
        if (LIVEKIT_CONFIG.sandboxID) {
          await generateSandboxToken();
        }
        // For manual token generation (development only)
        else if (LIVEKIT_CONFIG.apiKey && LIVEKIT_CONFIG.secretKey) {
          await generateManualToken();
        }
        else {
          setConnectionError(
            'No token generation method configured. Please set EXPO_PUBLIC_SANDBOX_ID or API keys.'
          );
        }
      } else {
        setConnectionError(
          'LiveKit server URL not configured. Please set EXPO_PUBLIC_LIVEKIT_URL.'
        );
      }
    } catch (error) {
      console.error('Connection initialization error:', error);
      setConnectionError('Failed to initialize connection details.');
    }
  };

  const generateSandboxToken = async () => {
    try {
      // In a real app, this would call your backend to generate a token
      // For sandbox mode, you'd integrate with LiveKit's sandbox token server
      const response = await fetch(`https://sandbox.livekit.io/api/token`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          sandbox_id: LIVEKIT_CONFIG.sandboxID,
          identity: `user-${Math.random().toString(36).substring(7)}`,
          name: 'June Voice User',
          room: 'voice-assistant-room',
        }),
      });
      
      if (!response.ok) {
        throw new Error('Failed to generate sandbox token');
      }
      
      const data = await response.json();
      setToken(data.token);
      
      // Store for future use
      await SecureStore.setItemAsync('livekit-token', data.token);
    } catch (error) {
      console.error('Sandbox token generation error:', error);
      setConnectionError('Failed to generate sandbox token. Please check your sandbox ID.');
    }
  };

  const generateManualToken = async () => {
    try {
      // In production, NEVER generate tokens on the client side
      // This is for development/testing only
      const { AccessToken } = await import('livekit-server-sdk');
      
      const token = new AccessToken(
        LIVEKIT_CONFIG.apiKey,
        LIVEKIT_CONFIG.secretKey,
        {
          identity: `user-${Math.random().toString(36).substring(7)}`,
          name: 'June Voice User',
        }
      );
      
      token.addGrant({
        room: 'voice-assistant-room',
        roomJoin: true,
        canPublish: true,
        canSubscribe: true,
      });
      
      const jwt = token.toJWT();
      setToken(jwt);
      
      // Store for future use
      await SecureStore.setItemAsync('livekit-token', jwt);
    } catch (error) {
      console.error('Manual token generation error:', error);
      setConnectionError(
        'Failed to generate token. In production, tokens should be generated by your backend.'
      );
    }
  };

  return {
    wsURL,
    token,
    connectionError,
  };
}

// Utility function to manually set connection details (for testing)
export async function setConnectionDetails(wsURL: string, token: string) {
  await SecureStore.setItemAsync('livekit-url', wsURL);
  await SecureStore.setItemAsync('livekit-token', token);
}

// Utility function to clear stored connection details
export async function clearConnectionDetails() {
  await SecureStore.deleteItemAsync('livekit-url');
  await SecureStore.deleteItemAsync('livekit-token');
}